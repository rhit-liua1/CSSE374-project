@startuml
class Java.GsonUtil {
~ {static} Gson GSON
+ {static} String serializeWithGson(Object)
+ {static} T parseJsonWithGson(String,Class<T>)
+ {static} List<T> parseJsonArrayWithGson(String,Class<T>)
}
class Java.Beans.CommandBean {
- CommandStream commandStream
+ String toString()
+ CommandStream getCommand()
+ void setCommand(CommandStream)
}
class Java.Data.Ingredients.Milk {
}
class Java.Beans.DrinkResponseBean {
~ DrinkResponse drinkresponse
+ DrinkResponse getDrinkResponse()
+ void setDrinkresponse(DrinkResponse)
+ String toString()
}
class Java.Data.Option {
- String Name
- int qty
+ String toString()
+ String getName()
+ void setName(String)
+ int getQty()
+ void setQty(int)
}
class Java.Domain.Behaviors.AddNoCondiment {
+ void addCondiments(List<Condiment>)
}
class Java.Data.Ingredients.DecaffCoffeeIng {
}
class Java.Server.Server {
- {static} OrderManager orderManager
- boolean isServerOn
- boolean flag
+ void run()
}
class Java.Data.Order {
~ int orderID
~ Address address
~ String drink
~ List<Condiment> condiments
+ int getOrderID()
+ void setOrderID(int)
+ Address getAddress()
+ void setAddress(Address)
+ String getDrink()
+ void setDrink(String)
+ List<Condiment> getCondiments()
+ void setCondiments(List<Condiment>)
+ String toString()
}
class Java.Data.Ingredients.Hazelnut {
}
class Java.Domain.Behaviors.OrderDrink {
+ void produceDrink(String)
}
class Java.Data.Drinks.ColombiaDark {
}
class Java.Domain.AdvancedCoffeeMachineController {
}
class Java.Domain.Behaviors.AddCondiment {
+ void addCondiments(List<Condiment>)
}
class Java.Data.Drinks.Decaff {
}
class Java.Data.Responses.UserResponse {
~ int orderID
~ int coffee_machine_id
~ int status
~ String status_message
~ String error_message
+ int getOrderID()
+ void setOrderID(int)
+ int getCoffee_machine_id()
+ void setCoffee_machine_id(int)
+ int getStatus()
+ void setStatus(int)
+ String getStatus_message()
+ void setStatus_message(String)
+ String getError_message()
+ void setError_message(String)
+ String toString()
}
class Java.Domain.Behaviors.AddNoRecipe {
+ void handleRecipe(List<Recipe>)
}
class Java.Data.Responses.DrinkResponse {
~ int orderID
~ int status
~ String errordesc
~ int errorcode
+ void setOrderID(int)
+ void setStatus(int)
+ void setErrordesc(String)
+ void setErrorcode(int)
+ int getOrderID()
+ int getStatus()
+ String getErrordesc()
+ int getErrorcode()
+ String toString()
}
class Java.Data.CommandStream {
~ int controller_id
~ int coffee_machine_id
~ int orderID
~ String DrinkName
~ String Requesttype
~ List<Option> Options
~ List<Recipe> Recipe
+ String toString()
+ List<Java.Data.Recipe> getRecipe()
+ void setRecipe(List<Java.Data.Recipe>)
+ int getController_id()
+ void setController_id(int)
+ int getCoffee_machine_id()
+ void setCoffee_machine_id(int)
+ int getOrderID()
+ void setOrderID(int)
+ String getDrinkName()
+ void setDrinkName(String)
+ String getRequesttype()
+ void setRequesttype(String)
+ List<Option> getOptions()
+ void setOptions(List<Option>)
}
class Java.Data.Recipe {
- String commandstep
- String object
+ String getCommandstep()
+ void setCommandstep(String)
+ String getObject()
+ void setObject(String)
}
class Java.Testcases.CoffeeControllerFactoryTest {
+ void CoffeeControllerFactorySimple()
+ void CoffeeControllerFactoryAdvanced()
+ void CoffeeControllerFactoryProgrammable()
}
class Java.Data.Ingredients.WhippedCream {
}
class Java.Data.Address {
- String street
- int ZIP
+ String getStreet()
+ void setStreet(String)
+ int getZIP()
+ void setZIP(int)
+ String toString()
}
class Java.Data.Ingredients.Mix {
}
class Java.Data.Ingredients.Coffee {
}
class Java.Domain.OrderManager {
- ArrayList<Order> orders
- String response
- int currentMachine
- ArrayList<Observer> observers
- ArrayList<String> coffeeTypes
- ArrayList<String> coffeeCondiments
+ String getResponse()
+ void setResponse(String)
+ void processOrderWithJson(String)
+ String generateUserResponseJson(DrinkResponse,int)
- CoffeeMachineController findCoffeeMachineByAddress(Address)
+ CoffeeMachineController findCoffeeMachineById(int)
+ Address findAddressById(int)
+ ArrayList<String> getCoffeeTypes()
+ ArrayList<Observer> getCoffeeMachineControllerDB()
+ Order getOrderById(int)
+ ArrayList<Order> getOrders()
+ ArrayList<String> getCoffeeCondiments()
+ void registerObserver(Observer)
+ void removeObserver(Observer)
+ void notifyObserver(String,int)
}
interface Java.Domain.Observer {
~ void update(String,OrderManager,int)
}
interface Java.Domain.Behaviors.OrderCondimentBehavior {
~ void addCondiments(List<Condiment>)
}
class Java.Domain.Behaviors.AddRecipe {
+ void handleRecipe(List<Recipe>)
}
interface Java.Domain.Behaviors.OrderRecipeBehavior {
~ void handleRecipe(List<Recipe>)
}
class Java.Domain.ProgrammableCoffeeMachineController {
}
class Java.Testcases.ObserverPatternTestCase {
+ void test1()
}
class Java.Domain.SimpleCoffeeMachineController {
}
class Java.Data.Drinks.Americano {
}
class Java.Data.Drinks.PumpkinSpice {
}
abstract class Java.Data.Ingredients.IngredientDecorator {
~ Drink drink
~ String name
~ String description
~ String actualDescription
+ String getDescription()
+ Drink getDrink()
+ String getName()
+ String getActualDescription()
}
class Java.Testcases.CoffeeMachineStrategyBehaviorTest {
+ void testSimpleController()
+ void testAdvancedController()
}
abstract class Java.Data.Drinks.Drink {
~ String name
~ String description
~ String recipeNeeded
~ String actualDescription
+ {static} Drink getDrink(String)
+ String getName()
+ String getDescription()
+ String getActualDescription()
+ String getRecipeNeeded()
}
interface Java.Domain.Behaviors.OrderDrinkBehavior {
~ void produceDrink(String)
}
interface Java.Domain.Subject {
~ void registerObserver(Observer)
~ void removeObserver(Observer)
~ void notifyObserver(String,int)
}
class Java.Factories.CoffeeControllerFactory {
+ CoffeeMachineController getCmc(String)
}
class Java.Data.Ingredients.SoyMilk {
}
class Java.Beans.UserResponseBean {
~ UserResponse user_response
+ UserResponse getUser_response()
+ void setUser_response(UserResponse)
+ String toString()
}
class Java.Data.Condiment {
- String Name
- int qty
+ String getName()
+ void setName(String)
+ int getQty()
+ void setQty(int)
+ String toString()
}
class Java.Main {
+ {static} void main(String[])
}
abstract class Java.Domain.CoffeeMachineController {
# OrderCondimentBehavior ocb
# OrderDrinkBehavior odb
# OrderRecipeBehavior orb
# int id
# String type
# int status
# Address address
~ ArrayList<String> condiments
+ void setFields(int,int,Address)
+ void update(String,OrderManager,int)
+ String processCommandStream(String)
- String generateDRJson(CommandStream)
+ void produceDrink(String)
+ void handleRecipes(List<Recipe>)
+ void addCondiments(List<Condiment>)
+ String toString()
+ int getErrorType()
+ String getErrorMsg(int)
+ OrderCondimentBehavior getOcb()
+ void setOcb(OrderCondimentBehavior)
+ OrderDrinkBehavior getOdb()
+ void setOdb(OrderDrinkBehavior)
+ int getId()
+ void setId(int)
+ String getType()
+ int getStatus()
+ void setStatus(int)
+ Address getAddress()
+ void setAddress(Address)
+ ArrayList<String> getCondiments()
+ void setCondiments(ArrayList<String>)
}
class Java.Data.Drinks.Espresso {
}
class Java.Data.Ingredients.Sugar {
}
class Java.Data.Ingredients.PumpkinSpiceIng {
}
class Java.Data.Ingredients.Nutmeg {
}
class Java.Beans.OrderBean {
~ Order order
+ void setOrder(Order)
+ Order getOrder()
+ String toString()
}
class Java.Data.Drinks.Latte {
}


Java.Data.Ingredients.IngredientDecorator <|-- Java.Data.Ingredients.Milk
Java.Domain.Behaviors.OrderCondimentBehavior <|.. Java.Domain.Behaviors.AddNoCondiment
Java.Data.Ingredients.IngredientDecorator <|-- Java.Data.Ingredients.DecaffCoffeeIng
Java.Data.Ingredients.IngredientDecorator <|-- Java.Data.Ingredients.Hazelnut
Java.Domain.Behaviors.OrderDrinkBehavior <|.. Java.Domain.Behaviors.OrderDrink
Java.Data.Drinks.Drink <|-- Java.Data.Drinks.ColombiaDark
Java.Domain.CoffeeMachineController <|-- Java.Domain.AdvancedCoffeeMachineController
Java.Domain.Behaviors.OrderCondimentBehavior <|.. Java.Domain.Behaviors.AddCondiment
Java.Data.Drinks.Drink <|-- Java.Data.Drinks.Decaff
Java.Domain.Behaviors.OrderRecipeBehavior <|.. Java.Domain.Behaviors.AddNoRecipe
java.io.Serializable <|.. Java.Data.CommandStream
Java.Data.Ingredients.IngredientDecorator <|-- Java.Data.Ingredients.WhippedCream
Java.Data.Ingredients.IngredientDecorator <|-- Java.Data.Ingredients.Mix
Java.Data.Ingredients.IngredientDecorator <|-- Java.Data.Ingredients.Coffee
Java.Domain.Subject <|.. Java.Domain.OrderManager
Java.Domain.Behaviors.OrderRecipeBehavior <|.. Java.Domain.Behaviors.AddRecipe
Java.Domain.CoffeeMachineController <|-- Java.Domain.ProgrammableCoffeeMachineController
Java.Domain.CoffeeMachineController <|-- Java.Domain.SimpleCoffeeMachineController
Java.Data.Drinks.Drink <|-- Java.Data.Drinks.Americano
Java.Data.Drinks.Drink <|-- Java.Data.Drinks.PumpkinSpice
Java.Data.Drinks.Drink <|-- Java.Data.Ingredients.IngredientDecorator
Java.Data.Ingredients.IngredientDecorator <|-- Java.Data.Ingredients.SoyMilk
Java.Domain.Observer <|.. Java.Domain.CoffeeMachineController
Java.Data.Drinks.Drink <|-- Java.Data.Drinks.Espresso
Java.Data.Ingredients.IngredientDecorator <|-- Java.Data.Ingredients.Sugar
Java.Data.Ingredients.IngredientDecorator <|-- Java.Data.Ingredients.PumpkinSpiceIng
Java.Data.Ingredients.IngredientDecorator <|-- Java.Data.Ingredients.Nutmeg
Java.Data.Drinks.Drink <|-- Java.Data.Drinks.Latte


Java.Beans.OrderBean ...> Java.Data.Order
Java.Beans.UserResponseBean ...> Java.Data.Responses.UserResponse
Java.Beans.DrinkResponseBean ...> Java.Data.Responses.DrinkResponse
Java.Beans.CommandBean ...> Java.Data.CommandStream

Java.Domain.OrderManager --> Java.Beans.OrderBean
Java.Domain.OrderManager --> Java.Beans.DrinkResponseBean
Java.Domain.OrderManager --> Java.Beans.CommandBean
Java.Domain.OrderManager --> Java.Beans.UserResponseBean
Java.Domain.OrderManager --> "*" Java.Domain.Observer
Java.Domain.Subject ..> Java.Domain.Observer
Java.Server.Server --> Java.Domain.OrderManager

Java.Domain.CoffeeMachineController --> Java.Domain.Behaviors.OrderDrinkBehavior
Java.Domain.CoffeeMachineController --> Java.Domain.Behaviors.OrderCondimentBehavior
Java.Domain.CoffeeMachineController --> Java.Domain.Behaviors.OrderRecipeBehavior


Java.Domain.CoffeeMachineController --> Java.Data.Address

Java.Domain.OrderManager --> Java.Data.Option

Java.Factories.CoffeeControllerFactory ...> Java.Domain.CoffeeMachineController

Java.Factories.CoffeeControllerFactory ...> Java.Data.Drinks

Java.Domain.OrderManager --> Java.Data.Recipe
Java.Domain.OrderManager --> Java.Data.Condiment
@enduml